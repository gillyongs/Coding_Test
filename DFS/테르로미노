
문제 링크
https://www.acmicpc.net/problem/14500

블로그 링크
https://khs20010327.tistory.com/165

구현 코드

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int map[501][501];
int c[501][501];
int dx[4] = { 0,1,0,-1 };
int dy[4] = { 1,0,-1,0 };
int k = 0;
int nn = 0;
int mm = 0;
int answer = -1;
int ct=0;
void dfs(int x, int y);
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int N, M;
    cin >> N >> M;
    nn = N;
    mm = M;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            cin >> map[i][j];
        }
    }
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            k = 0;
            ct = 0;
            dfs(j, i);
            c[i][j] = 0;
        }
    }
    
    for (int i = 1; i < N-1; i++) {
        for (int j = 1; j < M-1; j++) {
            int z = 0;
            int zz = 0;
            z = map[i][j] + map[i - 1][j] + map[i + 1][j] + map[i][j + 1] + map[i][j - 1];
            zz = max({ z - map[i - 1][j], z - map[i + 1][j], z - map[i][j + 1], z - map[i][j - 1] });
            //cout << "zz=" << zz<<"\n";
            if (zz > answer)
                answer = zz;
        }
    }
    for (int i = 1; i < M - 1 ; i++) {
        int z = map[0][i] + map[0][i - 1] + map[0][i + 1] + map[1][i];
        if (z > answer)
            answer = z;
        int t = map[N-1][i] + map[N-1][i - 1] + map[N-1][i + 1] + map[N-2][i];
        if (t > answer)
            answer = t;
    }
    for (int i = 1; i < N - 1; i++) {
        int z = map[i][0] + map[i-1][0] + map[i+1][0] + map[i][1];
        if (z > answer)
            answer = z;
        int t = map[i][M-1] + map[i-1][M-1] + map[i+1][M-1] + map[i][M-2];
        if (t > answer)
            answer = t;
    }
    
    cout << answer;
}

void dfs(int x, int y) {
    k += map[y][x];
    //Sleep(1000);
   
    c[y][x] = 1;
    ct++;
    if (ct == 4) {
        if (k > answer) {
            answer = k;
            //cout << "(" << x << "," << y << ") - "<<k<<"\n";
        }
        return;
    }
    for (int i = 0; i < 4; i++) {
        int nx = x + dx[i];
        int ny = y + dy[i];
        if (nx > -1 && ny > -1 && nx < mm && ny < nn) {
            if (c[ny][nx] != 1) {
                dfs(nx, ny);
                c[ny][nx] = 0;
                ct--;
                k -= map[ny][nx];
            }
        }
    }
}
